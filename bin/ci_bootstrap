#!/usr/bin/env ruby

$LOAD_PATH.unshift ::File.expand_path(::File.dirname(__FILE__) + '/../lib')

require 'rubygems'
require 'yaml'
require 'erb'
require 'fileutils'
require 'net/ssh'
require 'net/scp'

require 'ci_bootstrap/version'

module CiBootstrap
 lass CiBootstrap
    attr_accessor :gem_path, :local_repository_path, :revision, :config, :report_location

    def initialize(local_repository_path, revision)
      @local_repository_path = local_repository_path
      @revision = revision || "HEAD"
      @gem_path = File.join(File.dirname(File.expand_path(__FILE__)), '..')
      @report_location = File.join(@local_repository_path, "reports")
      load_config
      # @project_folder = ~/.ci_bootstrap/#{project_name}-#{revision}
      @project_folder = File.join(File.expand_path(ENV['HOME']), '.ci_bootstrap', "#{@config['project_name']}-#{@revision}")
    end

    def load_config
      # Load the .ci_bootstrap.yml file from the root of the clone of the project
      config_file = File.join(@local_repository_path, ".ci_bootstrap.yml") 
      @config = YAML::load_file(config_file)

      # Load the ~/.ci_bootstrap/provider_config.yml
      @provider_config = YAML::load_file(File.join(File.expand_path(ENV['HOME']), '.ci_bootstrap', "provider_config.yml"))
      @config[@config["provider"]] = @provider_config[@config["provider"]].merge(@config[@config["provider"]] || {})
      @config['puppet_path'] = File.join(@local_repository_path, @config['puppet_folder'])
    end

    def create_project_folder
      `mkdir #{@project_folder}`
    end

    def create_project_archive
      Dir.chdir(@local_repository_path)
      `git checkout #{@revision}`
      `git submodule update --init`
      `tar cf #{File.join(@project_folder, "project.tar")} --exclude .git --exclude "*.log" --exclude node_modules .`
    end

    def run
      create_project_folder

      create_project_archive

      write_vagrant_file

      STDOUT.sync = true

      Dir.chdir @project_folder do
        if @config["provider"] == "aws"
          install_aws_plugin
          install_aws_dummy_box unless dummy_aws_box?
        else
          install_openstack_plugin
          install_openstack_dummy_box unless dummy_openstack_box?
        end

        puts "DREW: installed plugins and dummy boxes"

        # run_cmd_and_show("cd #{@project_folder} && vagrant up --no-provision --provider #{@config["provider"]}")

        # puts "DREW: ran vagrant up"
        # puts "DREW: copying & extracting project repo..."

        # `vagrant ssh-config > ssh-config.local`
        # Net::SSH.start("default", "ubuntu", {:config => "ssh-config.local"}) do |ssh|
        #   ssh.exec!  "mkdir /vagrant/#{@config['project_name']}"
        #   ssh.exec!  "tar xf /vagrant/project.tar -C /vagrant/#{@config['project_name']}"
        #   ssh.exec!  "cp /vagrant/#{@config["project_name"]}/.ruby-version /vagrant"
        #   puppet = ssh.exec! "which puppet"
        #   unless puppet
        #     puts "Installing puppet"
        #     ssh.exec! "sudo apt-get --yes update && sudo apt-get --yes install puppet"
        #   end
        # end

        # puts "DREW: coppied & extracted project repo over"
        # puts "DREW: provisioning..."

        # run_cmd_and_show("cd #{@project_folder} && vagrant provision")

        # Net::SSH.start("default", "ubuntu", {:config => "ssh-config.local"}) do |ssh|
        #   report_exts = @config['report_file_ext'] || ['xml']
        #   report_exts.each{ |ext|
        #     ssh.exec!  "mkdir -p /vagrant/#{@config['project_name']}/reports/#{ext}"
        #   }
        #   write_test_runner
        #   puts "Uploading test runner"
        #   ssh.scp.upload! "test_runner.sh", "/vagrant/test_runner.sh"
        #   puts ssh.exec! "chmod a+x /vagrant/test_runner.sh"
        #   puts "Running tests"
        #   puts ssh.exec! "/vagrant/test_runner.sh"
        #   FileUtils.mkdir_p(@report_location)
        #   Dir["#{@report_location}/*.*"].each { |file| FileUtils.rm(file) }
        #   ssh.scp.download! "/vagrant/#{config['project_name']}/reports", @local_repository_path, :recursive => true
        # end
      end
    ensure
      # cleanup
    end


    def cleanup
      Dir.chdir @project_folder
      `vagrant destroy`
      FileUtils.rm_rf(@project_folder)
    end

    def vagrant?
      system("which vagrant")
    end

    def has_plugin?(plugin)
      system("vagrant plugin list | grep -q #{plugin}")
    end

    def aws_plugin?
      has_plugin?("vagrant-aws")
    end

    def openstack_plugin?
      has_plugin?("vagrant-openstack-plugin")
    end

    def install_plugin(plugin)
      `vagrant plugin install #{plugin}`
    end

    def install_aws_plugin
      install_plugin("vagrant-aws")
    end

    def install_openstack_plugin
      install_plugin("vagrant-openstack-plugin")
    end

    def dummy_box?(type)
      system("vagrant box list | grep -q \"dummy (#{type})\"")
    end

    def dummy_aws_box?
      dummy_box?("aws")
    end

    def dummy_openstack_box?
      dummy_box?("openstack")
    end

    def install_aws_dummy_box
      `vagrant box add dummy https://github.com/mitchellh/vagrant-aws/raw/master/dummy.box`
    end

    def install_openstack_dummy_box
      `vagrant box add dummy https://github.com/cloudbau/vagrant-openstack-plugin/raw/master/dummy.box` 
    end

    def write_vagrant_file
      template_file = File.join(@gem_path, "templates", "Vagrantfile.#{@config["provider"]}.erb")
      template = ERB.new(File.read(template_file), 0, "<>")
      File.write(File.join(@project_folder, "Vagrantfile"), template.result(binding))
    end
    
    def write_test_runner
      template_file = File.join(@gem_path, "templates", "#{@config['type']}_test_runner.sh.erb")
      template = ERB.new(File.read(template_file), 0, "<>")
      File.write(File.join(@project_folder, "test_runner.sh"), template.result(binding), "perm" => 0755)
    end

    def run_cmd_and_show(cmd)
      IO.popen(cmd) { |f| f.each { |l| puts l } }
    end
  end
end

CiBootstrap::CiBootstrap.new(ARGV[0], ARGV[1]).run
