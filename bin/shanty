#!/usr/bin/env ruby
$LOAD_PATH.unshift ::File.expand_path(::File.dirname(__FILE__) + '/../lib')

require "thor"
require "shanty"

class ShantyCommands < Thor
  include Thor::Actions

  desc "init <language>", "Initializes Shanty in the present working directory"
  long_desc <<-LONGDESC
    `shanty init <language>` will create a .shanty directory in your user's home
    directory if it doesn't already exist. It will also create a starter
    .shanty.yml in the current working directory if one doesn't already exist.
  LONGDESC
  def init(language)
    initializer = Shanty::Initializer.new
    initializer.init(language)
  end

  desc "generate TEMPLATE", "Generates various Shanty files for you, for a given template"
  subcommand "generate", Shanty::Generator

  desc "create", "Generates Vagrantfile & starter Puppet manifest"
  long_desc <<-LONGDESC
    `shanty create` will create a Vagrantfile in the current working directory
    as well as setup a starting puppet manifiest and its tree structure.
  LONGDESC
  def create
    # generate the project Vagrantfile
    # generate the starter Puppet manifest and directory structure
  end

  desc "test [REVISION]", "Builds a Shanty, runs the tests, then destroys the Shanty"
  long_desc <<-LONGDESC
    `shanty test [--verbose, -v] [REVISION]` Will spin up a new VM using the
    configured provider and run the given test steps against the REVISION.

    REVISION is optional, and if omitted will default to "HEAD".

    Passing the option --verbose will output a lot of debugging information, as
    well as explain exactly which commands are being run. It also enables the
    --verbose and --debug commands for the Vagrantfile, which will give a
    tremendous amount of debugging output.
  LONGDESC
  option :verbose, :type => :boolean, :aliases => "-v"
  def test(revision="HEAD")
    tester = Shanty::Tester.new
    tester.test(options.merge({"revision" => revision}))
  end


  # desc "build", "Spins up a VM in the RLPC using the project's puppet manifest"
  # method_options %w(force -f) => :boolean
  # def build
  #   if options.force?
  #     Shanty::VMBuilder.build!
  #   else
  #     Shanty::VMBuilder.build
  #   end
  # end

  # desc "ssh", "Creates an SSH tunnel into the current VM"
  # def ssh
  #   puts "Logging into your Shanty VM..."
  #   sleep 1
  #   puts "No VM found! Create one with 'shanty build'"
  # end
end

ShantyCommands.start
